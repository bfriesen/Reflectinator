<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".generated.cs" #>
<#@ include file="TemplateFunctions.t4"#>
////////////////////////////////////////////////////////////////////////////////
// This file was generated by a tool. Any manual changes to this file will be //
// lost if/when the file is regenerated. If changes need to be made to this   //
// file, they should be made in StaticFuncMethod`n.tt, which regenerates this //
// file.                                                                      //
////////////////////////////////////////////////////////////////////////////////

using System;
using System.Linq.Expressions;
using System.Reflection;

namespace Reflectinator
{
<#
for (int i = 0; i < MaxNumberOfFuncGenericArguments - 1; i++)
{
#>
    public sealed class StaticFuncMethod<TDeclaringType<# PrintJoinFormat(", ", "TArg{1}", i, true, false); #>, TReturnType> : Method, IStaticMethod
    {
        private readonly Lazy<Expression<Func<object[], object>>> _invokeLooseExpression;
        private readonly Lazy<Func<object[], object>> _invokeLoose;
        
        private readonly Lazy<Expression<Func<<# PrintJoinFormat(", ", "TArg{1}", i, false, true); #>TReturnType>>> _invokeExpression;
        private readonly Lazy<Func<<# PrintJoinFormat(", ", "TArg{1}", i, false, true); #>TReturnType>> _invoke;
        
        internal StaticFuncMethod(MethodInfo methodInfo)
            : base(methodInfo)
        {
            _invokeLooseExpression = new Lazy<Expression<Func<object[], object>>>(() => ExpressionFactory.CreateNonGenericStaticMethodFuncExpression(methodInfo));
            _invokeLoose = new Lazy<Func<object[], object>>(() => _invokeLooseExpression.Value.Compile());

            _invokeExpression = new Lazy<Expression<Func<<# PrintJoinFormat(", ", "TArg{1}", i, false, true); #>TReturnType>>>(() => ExpressionFactory.CreateStaticMethodFuncExpression<<# PrintJoinFormat(", ", "TArg{1}", i, false, true); #>TReturnType>(methodInfo));
            _invoke = new Lazy<Func<<# PrintJoinFormat(", ", "TArg{1}", i, false, true); #>TReturnType>>(() => _invokeExpression.Value.Compile());
        }
        
        public override bool IsStatic { get { return true; } }
        
        object IStaticMethod.Invoke(params object[] args) { return _invokeLoose.Value(args); }
        Expression<Func<object[], object>> IStaticMethod.InvokeExpression { get { return _invokeLooseExpression.Value; } }
        Func<object[], object> IStaticMethod.InvokeDelegate { get { return _invokeLoose.Value; } }
        
        public TReturnType Invoke(<# PrintJoinFormat(", ", "TArg{1} arg{1}", i, false, false); #>) { return _invoke.Value(<# PrintJoinFormat(", ", "arg{1}", i, false, false); #>); }
        public Expression<Func<<# PrintJoinFormat(", ", "TArg{1}", i, false, true); #>TReturnType>> InvokeExpression { get { return _invokeExpression.Value; } }
        public Func<<# PrintJoinFormat(", ", "TArg{1}", i, false, true); #>TReturnType> InvokeDelegate { get { return _invoke.Value; } }
    }

<#
}
#>
}