<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
////////////////////////////////////////////////////////////////////////////////
// This file was generated by a tool. Any manual changes to this file will be //
// lost if/when the file is regenerated. Changes should be made in the        //
// Constructor`n.tt file, which regenerates this file.                        //
////////////////////////////////////////////////////////////////////////////////

using System;
using System.Dynamic;
using System.Reflection;

namespace Reflectinator
{<#
for (int i = 0; i < 17; i++)
{
#>

    public sealed class Constructor<TDeclaringType<# PrintJoinFormat(", ", "TArg{1}", i, true, false); #>> : Constructor
    {
        private readonly Lazy<Func<<# PrintJoinFormat(", ", "TArg{1}", i, false, true); #>TDeclaringType>> _invoke;

        internal Constructor()
            : this(typeof(TDeclaringType).GetConstructorInfo(<# PrintJoinFormat(", ", "typeof(TArg{1})", i, false, false); #>))
        {
        }

        private Constructor(ConstructorInfo constructorInfo)
            : base(constructorInfo)
        {
            _invoke = new Lazy<Func<<# PrintJoinFormat(", ", "TArg{1}", i, false, true); #>TDeclaringType>>(() => (Func<<# PrintJoinFormat(", ", "TArg{1}", i, false, true); #>TDeclaringType>)FuncFactory.CreateConstructorFunc(ConstructorInfo, true));
        }

        public TDeclaringType Invoke(<# PrintJoinFormat(", ", "TArg{1} arg{1}", i, false, false); #>)
        {
            return _invoke.Value(<# PrintJoinFormat(", ", "arg{1}", i, false, false); #>);
        }

        public override bool TryInvoke(InvokeBinder binder, object[] args, out object result)
        {
            result = null;

            if (args.Length != <#= i #>)
            {
                return false;
            }

            // TODO: verify that all args are able to be assigned to the constructor parameters.

            try
            {
                result = Invoke(<# PrintJoinFormat(", ", "(TArg{1})args[{0}]", i, false, false); #>);
                return true;
            }
            catch
            {
                return false;
            }
        }
    }
<#
}
#>}
<#+
    void PrintJoinFormat(string delim, string format, int index, bool pre, bool post)
    {
        if (index == 0)
        {
            return;
        }

        Write(
            (pre ? delim : "")
            + string.Join(delim, Enumerable.Range(0, index).Select(i => string.Format(format, i, i + 1)))
            + (post ? delim : ""));
    }
#>