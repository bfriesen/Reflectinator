<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".generated.cs" #>
<#@ include file="TemplateFunctions.t4"#>
////////////////////////////////////////////////////////////////////////////////
// This file was generated by a tool. Any manual changes to this file will be //
// lost if/when the file is regenerated. If changes need to be made to this   //
// file, they should be made in ActionMethod`n.tt, which regenerates this     //
// file.                                                                      //
////////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Concurrent;
using System.Reflection;

namespace Reflectinator
{
<#
for (int i = 0; i < MaxNumberOfFuncGenericArguments - 1; i++)
{
#>
    public class ActionMethod<TDeclaringType<# PrintJoinFormat(", ", "TArg{1}", i, true, false); #>> : Method, IActionMethod
    {
        private readonly Lazy<Action<object, object[]>> _invokeLoose;
        private readonly Lazy<Action<TDeclaringType<# PrintJoinFormat(", ", "TArg{1}", i, true, false); #>>> _invoke;
    
        internal ActionMethod(MethodInfo methodInfo)
            : base(methodInfo)
        {
            _invokeLoose = new Lazy<Action<object, object[]>>(() => ExpressionFactory.CreateNonGenericInstanceMethodAction(methodInfo));
            _invoke = new Lazy<Action<TDeclaringType<# PrintJoinFormat(", ", "TArg{1}", i, true, false); #>>>(() => ExpressionFactory.CreateInstanceMethodAction<TDeclaringType<# PrintJoinFormat(", ", "TArg{1}", i, true, false); #>>(methodInfo));
        }
    
        void IActionMethod.Invoke(object instance, params object[] args) { _invokeLoose.Value(instance, args); }
        Action<object, object[]> IActionMethod.InvokeDelegate { get { return _invokeLoose.Value; } }
    
        public void Invoke(TDeclaringType instance<# PrintJoinFormat(", ", "TArg{1} arg{1}", i, true, false); #>) { _invoke.Value(instance<# PrintJoinFormat(", ", "arg{1}", i, true, false); #>); }
        public Action<TDeclaringType<# PrintJoinFormat(", ", "TArg{1}", i, true, false); #>> InvokeDelegate { get { return _invoke.Value; } }
    }

<#
}
#>
}