<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".generated.cs" #>
<#@ include file="TemplateFunctions.t4"#>
////////////////////////////////////////////////////////////////////////////////
// This file was generated by a tool. Any manual changes to this file will be //
// lost if/when the file is regenerated. If changes need to be made to this   //
// file, they should be made in StaticActionMethod`n.tt, which regenerates    //
// this file.                                                                 //
////////////////////////////////////////////////////////////////////////////////

using System;
using System.Reflection;

namespace Reflectinator
{
<#
for (int i = 0; i < MaxNumberOfFuncGenericArguments - 1; i++)
{
#>
    public sealed class StaticActionMethod<TDeclaringType<# PrintJoinFormat(", ", "TArg{1}", i, true, false); #>> : ActionMethod<TDeclaringType<# PrintJoinFormat(", ", "TArg{1}", i, true, false); #>>, IStaticActionMethod
    {
        private readonly Lazy<Action<object[]>> _invokeLoose;
        private readonly Lazy<Action<#= i > 0 ? "<" : "" #><# PrintJoinFormat(", ", "TArg{1}", i, false, false); #><#= i > 0 ? ">" : "" #>> _invoke;
        
        internal StaticActionMethod(MethodInfo methodInfo)
            : base(methodInfo)
        {
            _invokeLoose = new Lazy<Action<object[]>>(() => FuncFactory.CreateNonGenericStaticMethodAction(methodInfo));
            _invoke = new Lazy<Action<#= i > 0 ? "<" : "" #><# PrintJoinFormat(", ", "TArg{1}", i, false, false); #><#= i > 0 ? ">" : "" #>>(() => FuncFactory.CreateStaticMethodAction<#= i > 0 ? "<" : "" #><# PrintJoinFormat(", ", "TArg{1}", i, false, false); #><#= i > 0 ? ">" : "" #>(methodInfo));
        }
        
        public override bool IsStatic { get { return true; } }
        
        void IStaticActionMethod.Invoke(params object[] args) { _invokeLoose.Value(args); }
        Action<object[]> IStaticActionMethod.InvokeDelegate { get { return _invokeLoose.Value; } }

        object IStaticMethod.Invoke(params object[] args) { _invokeLoose.Value(args); return null; }
        Func<object[], object> IStaticMethod.InvokeDelegate { get { return ((IStaticMethod)this).Invoke; } }
        
        public void Invoke(<# PrintJoinFormat(", ", "TArg{1} arg{1}", i, false, false); #>) { _invoke.Value(<# PrintJoinFormat(", ", "arg{1}", i, false, false); #>); }
        public new Action<#= i > 0 ? "<" : "" #><# PrintJoinFormat(", ", "TArg{1}", i, false, false); #><#= i > 0 ? ">" : "" #> InvokeDelegate { get { return _invoke.Value; } }
    }

<#
}
#>
}