<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".generated.cs" #>
<#@ include file="TemplateFunctions.t4"#>
////////////////////////////////////////////////////////////////////////////////
// This file was generated by a tool. Any manual changes to this file will be //
// lost if/when the file is regenerated. If changes need to be made to this   //
// file, they should be made in FuncMethod`n.tt, which regenerates this file. //
////////////////////////////////////////////////////////////////////////////////

using System;
using System.Linq.Expressions;
using System.Reflection;

namespace Reflectinator
{
<#
for (int i = 0; i < MaxNumberOfFuncGenericArguments - 1; i++)
{
#>
    public sealed class FuncMethod<TDeclaringType<# PrintJoinFormat(", ", "TArg{1}", i, true, false); #>, TReturnType> : Method, IFuncMethod
    {
        private readonly Lazy<Expression<Func<TDeclaringType<# PrintJoinFormat(", ", "TArg{1}", i, true, false); #>, TReturnType>>> _invokeExpression;
        private readonly Lazy<Func<TDeclaringType<# PrintJoinFormat(", ", "TArg{1}", i, true, false); #>, TReturnType>> _invoke;

        internal FuncMethod(MethodInfo methodInfo)
            : base(methodInfo)
        {
            _invokeExpression = new Lazy<Expression<Func<TDeclaringType<# PrintJoinFormat(", ", "TArg{1}", i, true, false); #>, TReturnType>>>(() => ExpressionFactory.CreateInstanceMethodFuncExpression<TDeclaringType<# PrintJoinFormat(", ", "TArg{1}", i, true, false); #>, TReturnType>(methodInfo));
            _invoke = new Lazy<Func<TDeclaringType<# PrintJoinFormat(", ", "TArg{1}", i, true, false); #>, TReturnType>>(() => _invokeExpression.Value.Compile());
        }
    
        public TReturnType Invoke(TDeclaringType instance<# PrintJoinFormat(", ", "TArg{1} arg{1}", i, true, false); #>) { return _invoke.Value(instance<# PrintJoinFormat(", ", "arg{1}", i, true, false); #>); }
        public Expression<Func<TDeclaringType<# PrintJoinFormat(", ", "TArg{1}", i, true, false); #>, TReturnType>> InvokeExpression { get { return _invokeExpression.Value; } }
        public Func<TDeclaringType<# PrintJoinFormat(", ", "TArg{1}", i, true, false); #>, TReturnType> InvokeDelegate { get { return _invoke.Value; } }
    }

<#
}
#>
}